@page "/"

@using CommissionPage.wwwroot
@inject DarkModeService DarkModeService
@inject IJSRuntime JSRuntime

<PageTitle>Home</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Padding="Padding.Is5" Margin="Margin.IsAuto.OnX" Flex="Flex.AlignItems.Center.Column" Background="Background.Primary">

    <MudPaper id="paper1" Class="pa-15 ma-10 d-flex" Elevation="23" flex-wrap-reverse gap-4 Style="overflow: hidden">

        <MudStack Class="pa-3 d-flex">
            <MudText Size="3" Typo="Typo.h2" Color="Color.Primary">
                Avatar Commissions
            </MudText>

            <MudText Typo="Typo.body1">
                Hi, I'm Marcel, a cs dev that loves to create 3d models. I have been creating various 3d models, shaders and avatars for a few years now. I have created a few avatars for myself and friends and I have decided to start taking commissions. If you are interested in getting a avatar for vrchat or any other platform please contact me. I will be happy to help you bring your sona in to the game.
            </MudText>

            <MudText Typo="Typo.h5" Color="Color.Primary">Contact:</MudText>

            <MudText Typo="Typo.body1">Discord: marcelsigl</MudText>
            <MudStack Row="true">
                <MudButton Href="https://github.com/MarcelOwO" Class="scale-up"  Variant="Variant.Outlined" StartIcon="@Icons.Custom.Brands.GitHub" Color="Color.Primary"> Github</MudButton>
                <MudButton Href="https://t.me/MarcelUwU" Class="scale-up" Variant="Variant.Outlined" StartIcon="@Icons.Custom.Brands.Telegram" Color="Color.Primary">Telegram</MudButton>
                <MudButton Href="https://x.com/Marcel_Sigl"  Class="scale-up" Variant="Variant.Outlined" StartIcon="@Icons.Custom.Brands.Twitter" Color="Color.Primary">X</MudButton>
            </MudStack>
        </MudStack>

        <MudButton Style="width: 750px;height: 250px" OnClick="OpenOverlay" Class="rounded-lg ma-auto">
            <MudImage Src="@SonaLink" ObjectFit="ObjectFit.Cover" Width="250"/>
        </MudButton>
        <MudOverlay @bind-Visible="_visible" DarkBackground AutoClose="true">
            <MudImage Src="@SonaLink" Class="rounded-lg ma-auto" ObjectFit="ObjectFit.Cover"/>
        </MudOverlay>
    </MudPaper>

    <MudPaper id="paper2" Class="pa-15 ma-10" Elevation="23" data-aos="zoom-out">

        <MudText Class="ma-4" Size="3"Typo="Typo.h3" Color="Color.Primary">
            Examples of my work
        </MudText>

        <MudGrid Justify="Justify.Center">
            <MudItem xs-4 Class="d-flex  justify-center">
                <MudCarousel Class="rounded-lg" Style="height:350px;width:300px" ShowArrows="true" ShowBullets="false" EnableSwipeGesture="true" AutoCycle="true" ItemsSource="@_imageList1">
                    <ItemTemplate>
                        <MudButton ObjectPosition="ObjectPosition.Center" Style="height: 100%;width: 100%;object-fit: contain" OnClick="() => OpenImageOverlay(context)">
                            <MudImage Style="width: 110%;height: 110%" ObjectFit="ObjectFit.Contain" Src="@context"/>
                        </MudButton>
                    </ItemTemplate>
                </MudCarousel>
            </MudItem>

            <MudItem xs-4 Class="d-flex  justify-center">
                <MudCarousel Class="rounded-lg" Style="height:350px;width:300px" ShowArrows="true" ShowBullets="false" EnableSwipeGesture="true" AutoCycle="true" ItemsSource="@_imageList2">
                    <ItemTemplate>
                        <MudButton ObjectPosition="ObjectPosition.Center" Style="height: 100%;width: 100%;object-fit: contain" OnClick="() => OpenImageOverlay(context)">
                            <MudImage Style="width: 110%;height: 110%" ObjectFit="ObjectFit.Contain" Src="@context"/>
                        </MudButton>
                    </ItemTemplate>
                </MudCarousel>
            </MudItem>
            <MudItem xs-4 Class="d-flex  justify-center">
                <MudCarousel Class="rounded-lg" Style="height:350px;width:300px" ShowArrows="true" ShowBullets="false" EnableSwipeGesture="true" AutoCycle="true" ItemsSource="@_imageList3">
                    <ItemTemplate>
                        <MudButton ObjectPosition="ObjectPosition.Center" Style="height: 100%;width: 100%;object-fit: contain" OnClick="() => OpenImageOverlay(context)">
                            <MudImage Style="width: 110%;height: 110%" ObjectFit="ObjectFit.Contain" Src="@context"/>
                        </MudButton>
                    </ItemTemplate>
                </MudCarousel>
            </MudItem>
        </MudGrid>
    </MudPaper>

    <MudPaper id="paper3" Class="pa-15 ma-10" Elevation="23" data-aos="fade">
        <MudText Class="ma-4" Typo="Typo.h3" Color="Color.Primary">
            Prices
        </MudText>

        <MudText Typo="Typo.body1">
            Prices vary depending on the complexity of the avatar, but in general the prices start around 100 Euros
            for a avatar setup for vrchat. Any assets that you would want me to add to the avatar would need to be
            provided by you. For custome assets it will depend on the complexity.
        </MudText>
    </MudPaper>

    <MudPaper id="paper4" Class="pa-15 ma-10" Elevation="23">
        <MudText Class="ma-4" Typo="Typo.h3" Color="Color.Primary">
            Commission Process
        </MudText>
        <MudText Typo="Typo.body1">
            <strong>Contact:</strong> You can reach out to me via Discord, Telegram, or Twitter, preferably through discord as I am mostly active there. Once we connect, we will discuss your requirements in detail.
        </MudText>
        <MudText Typo="Typo.body1">
            <strong>Payment:</strong> Payment is done via PayPal. I will charge you before you receive the model/assets. Since this is a digital product, refunds are not available after delivery.
        </MudText>
        <MudText Typo="Typo.body1">
            <strong>Delivery:</strong> After finalizing the details, I will start working on your commission. The finished asset will be delivered to you via the agreed-upon method (e.g., email, file sharing service) after I have received the final payment.
        </MudText>
        <MudText Typo="Typo.body1">
            <strong>Revisions:</strong> If there are any issues or adjustments needed, I will work with you to ensure you are satisfied with the result. Minor revisions are included in the initial price.
        </MudText>
        <MudText Typo="Typo.body1">
            <strong>Licensing:</strong> The final product is for personal use in VRChat. Redistribution or commercial use is not allowed without prior agreement also you are required to own the assets used in the commission be that avatar bases or assets.
        </MudText>
        <MudText Typo="Typo.body1">
            <strong>Support:</strong> If you encounter any issues with the product, please contact me, and I will try to resolve the issue.
        </MudText>
    </MudPaper>

    <MudOverlay @bind-Visible="_overlayVisible" DarkBackground="true" AutoClose="true">
        <MudPaper Style="height: 90vh;width: 70vh" Class="rounded-lg">
            <MudStack>
                <MudImage Elevation="23" Class="rounded-lg  ma-4" Src="@_overlayImageSrc" ObjectFit="ObjectFit.Contain" Fluid/>
                <MudText Class="text-center ma-4">
                    @GetText(_overlayImageSrc)
                </MudText>
            </MudStack>
        </MudPaper>
    </MudOverlay>

</MudContainer>
<style>
  
</style>

@code
{
    private string GetText(string image) => image switch
    {
        "img/gallery/1.png" => "Custom texture commission of the kita'vali model",
        "img/gallery/2.png" => "Custom texture commission",
        "img/gallery/3.jpg" => "Custom texture on a slightly modified jerry'vali model",
        "img/gallery/4.png" => "Custom texture",
        "img/gallery/5.png" => "Custom modified rex with custom texture and using some assets from gumroad with a custom tail",
        "img/gallery/6.png" => "kitbash rex with hyenid hair, nkg protogen ears and the ghostly chestfluff",
        "img/kitbash/robot-nanachi.png" => "Modified zoichi model with some kitbash parts of other models",
        "img/kitbash/snek.png" => "kitbash model I created for a friend",
        "img/kitbash/squid.png" => "kitbash model of a rex with some tentacles",
        "img/kitbash/thingy.png" => "slight kitbash to change the body proportions of the model",
        "img/custom/twitch.png" => "simple twitch logo as a mesh",
        "img/custom/tail.png" => "a tail I created for scottish_ripper",
        _ => "Error loading image"
    };


    private bool _overlayVisible = false;
    private static string _overlayImageSrc = string.Empty;

    private void OpenImageOverlay(string imageSrc)
    {
        if (string.IsNullOrEmpty(imageSrc)) return;

        _overlayImageSrc = imageSrc;
        _overlayVisible = true;
        StateHasChanged();
    }

    private bool _visible = false;

    public void OpenOverlay()
    {
        _visible = true;
        StateHasChanged();
    }

    private string SonaLink => DarkModeService.IsDarkMode ? "img/sona-dark.png" : "img/sona-light.png";

    private readonly List<string> _imageList1 = ["img/gallery/1.png", "img/gallery/2.png", "img/gallery/3.jpg", "img/gallery/4.png", "img/gallery/5.png", "img/gallery/6.png"];
    private readonly List<string> _imageList2 = ["img/kitbash/robot-nanachi.png", "img/kitbash/snek.png", "img/kitbash/squid.png", "img/kitbash/thingy.png"];
    private readonly List<string> _imageList3 = ["img/custom/twitch.png", "img/custom/tail.png"];

    protected override void OnInitialized()
    {
        DarkModeService.OnDarkModeChange += StateHasChanged;
    }

    public void Dispose()
    {
        DarkModeService.OnDarkModeChange -= StateHasChanged;

        _dotNetHelper?.Dispose();
    }

    private DotNetObjectReference<Home>? _dotNetHelper;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _dotNetHelper = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("detectScroll", "paper1", _dotNetHelper);
            await JSRuntime.InvokeVoidAsync("detectScroll", "paper2", _dotNetHelper);
            await JSRuntime.InvokeVoidAsync("detectScroll", "paper3", _dotNetHelper);
            await JSRuntime.InvokeVoidAsync("detectScroll", "paper4", _dotNetHelper);
        }
    }


}